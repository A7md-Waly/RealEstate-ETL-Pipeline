x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.3}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-hdfs requests jaydebeapi jpype1}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/inputData:/opt/airflow/inputData
    - ${AIRFLOW_PROJ_DIR:-.}/outputData:/opt/airflow/outputData
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy

services:
  airflow-postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow-hive-network

  redis:
    image: redis:7.2-bookworm
    container_name: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - airflow-hive-network

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    environment:
      <<: *airflow-common-env
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-hive-network

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-hive-network

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-hive-network

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-hive-network

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/inputData /sources/outputData
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,inputData,outputData}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - airflow-hive-network

  namenode:
    image: apache/hadoop:3.3.6
    container_name: namenode
    hostname: namenode
    command: ["hdfs", "namenode"]
    ports:
      - "9870:9870"
      - "9000:9000"
    environment:
      CLUSTER_NAME: test
      HDFS-SITE.XML_dfs.namenode.name.dir: file:///tmp/hadoop-hadoop/dfs/name
      CORE-SITE.XML_fs.defaultFS: hdfs://namenode:9000
    volumes:
      - namenode-data:/tmp/hadoop-hadoop/dfs/name
    restart: always
    networks:
      - airflow-hive-network

  datanode:
    image: apache/hadoop:3.3.6
    container_name: datanode
    hostname: datanode
    command: ["hdfs", "datanode"]
    environment:
      CORE-SITE.XML_fs.defaultFS: hdfs://namenode:9000
      HDFS-SITE.XML_dfs.datanode.data.dir: file:///tmp/hadoop-hadoop/dfs/data
    volumes:
      - datanode-data:/tmp/hadoop-hadoop/dfs/data
    restart: always
    depends_on:
      - namenode
    networks:
      - airflow-hive-network

  resourcemanager:
    image: apache/hadoop:3.3.6
    container_name: resourcemanager
    hostname: resourcemanager
    command: ["yarn", "resourcemanager"]
    ports:
      - "8088:8088"
    environment:
      CORE-SITE.XML_fs.defaultFS: hdfs://namenode:9000
    restart: always
    depends_on:
      - namenode
    networks:
      - airflow-hive-network

  nodemanager:
    image: apache/hadoop:3.3.6
    container_name: nodemanager
    hostname: nodemanager
    command: ["yarn", "nodemanager"]
    environment:
      CORE-SITE.XML_fs.defaultFS: hdfs://namenode:9000
    restart: always
    depends_on:
      - resourcemanager
    networks:
      - airflow-hive-network

  hive-metastore-db:
    image: postgres:13
    container_name: hive-metastore-db
    hostname: hive-metastore-db
    environment:
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hive
      POSTGRES_DB: metastore
    volumes:
      - hive-metastore-db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "hive"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow-hive-network

  hive-metastore:
    image: apache/hive:3.1.3
    container_name: hive-metastore
    hostname: hive-metastore
    depends_on:
      - hive-metastore-db
      - namenode
    environment:
      DB_DRIVER: postgres
      SERVICE_NAME: metastore
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://hive-metastore-db:5432/metastore -Djavax.jdo.option.ConnectionUserName=hive -Djavax.jdo.option.ConnectionPassword=hive"
      HIVE-SITE.XML_hive.metastore.uris: "thrift://hive-metastore:9083"
      HIVE-SITE.XML_hive.metastore.warehouse.dir: "hdfs://namenode:9000/user/hive/warehouse"
    command: ["sh", "-c", "sleep 45 && /opt/hive/bin/schematool -initSchema -dbType postgres && /opt/hive/bin/hive --service metastore"]
    restart: always
    networks:
      - airflow-hive-network

  hiveserver2:
    image: apache/hive:3.1.3
    container_name: hiveserver2
    hostname: hiveserver2
    depends_on:
      - hive-metastore
    environment:
      SERVICE_NAME: hiveserver2
      HIVE-SITE.XML_hive.metastore.uris: "thrift://hive-metastore:9083"
    ports:
      - "10000:10000"
      - "10002:10002"
    command: ["sh", "-c", "sleep 90 && /opt/hive/bin/hive --service hiveserver2"]
    restart: always
    networks:
      - airflow-hive-network

volumes:
  airflow-postgres-db-volume:
  hive-metastore-db-data:
  namenode-data:
  datanode-data:

networks:
  airflow-hive-network:
    driver: bridge
